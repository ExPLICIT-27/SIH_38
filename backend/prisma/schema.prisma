// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  role          Role     @default(MEMBER)
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  organizations OrgMember[]
  uploads       DataUpload[]

  @@map("User")
}

model Organization {
  id            String   @id @default(cuid())
  name          String
  type          String
  mode          Mode     @default(SELLER)
  walletAddress String?  @map("walletAddress")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  members       OrgMember[]
  projects      Project[]

  @@map("Organization")
}

model OrgMember {
  id        String       @id @default(cuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @map("userId")
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String       @map("orgId")
  role      String
  createdAt DateTime     @default(now()) @map("createdAt")
  updatedAt DateTime     @updatedAt @map("updatedAt")

  @@unique([userId, orgId])
  @@map("OrgMember")
}

model Project {
  id        String        @id @default(cuid())
  org       Organization  @relation(fields: [orgId], references: [id])
  orgId     String        @map("orgId")
  name      String
  type      String
  areaHa    Float         @default(0) @map("areaHa")
  status    ProjectStatus @default(DRAFT)
  createdAt DateTime      @default(now()) @map("createdAt")
  updatedAt DateTime      @updatedAt @map("updatedAt")

  @@map("Project")
}

enum Role {
  ADMIN
  ORG_ADMIN
  MEMBER
  VERIFIER
}

model OtpCode {
  id         String   @id @default(cuid())
  email      String
  code       String
  expiresAt  DateTime @map("expiresAt")
  consumed   Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("createdAt")

  @@index([email])
  @@map("OtpCode")
}

model DataUpload {
  id           String        @id @default(cuid())
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?       @map("userId")
  fileName     String        @map("fileName")
  storagePath  String        @map("storagePath")
  sha256       String
  size         Int
  capturedAt   DateTime?     @map("capturedAt")
  metadata     Json?
  cid          String?
  status       UploadStatus  @default(PENDING)
  createdAt    DateTime      @default(now()) @map("createdAt")
  verifications Verification[]

  @@map("DataUpload")
}

enum UploadStatus {
  PENDING
  PINNED
  FAILED
}

enum Mode {
  SELLER
  BUYER
  BOTH
}

enum ProjectStatus {
  DRAFT
  APPROVED
}

model Setting {
  key      String  @id
  value    Json?   @map("value")
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@map("Setting")
}

model Verification {
  id         String   @id @default(cuid())
  upload     DataUpload @relation(fields: [uploadId], references: [id])
  uploadId   String   @map("uploadId")
  approved   Boolean
  notes      String?
  anchoredTx String?  @map("anchoredTx")
  createdAt  DateTime @default(now()) @map("createdAt")

  @@map("Verification")
}

model Listing {
  id             String   @id @default(cuid())
  creditAddress  String   @map("creditAddress")
  tokenId        Int      @map("tokenId")
  pricePerUnit   Float    @map("pricePerUnit")
  remaining      Int
  createdAt      DateTime @default(now()) @map("createdAt")
  status         ListingStatus @default(ACTIVE)
  orders         Order[]

  @@map("Listing")
}

model Order {
  id          String   @id @default(cuid())
  listing     Listing  @relation(fields: [listingId], references: [id])
  listingId   String   @map("listingId")
  buyerWallet String   @map("buyerWallet")
  amount      Int
  txHash      String   @map("txHash")
  createdAt   DateTime @default(now()) @map("createdAt")

  @@map("Order")
}

enum ListingStatus {
  ACTIVE
  SOLD_OUT
}
